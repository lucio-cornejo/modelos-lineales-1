{
  "hash": "acd02c5a36c3c487ec422b2c44de05f1",
  "result": {
    "engine": "knitr",
    "markdown": "# Regresión robusta {-}\n\n## Examen final\n\n- El examen es con acceso solo a Paideia.\n- Se permitirá el uso de `R`, pero se responde en hoja,\nno es necesario presentar tal código.\n- **Se tiene que usar la máquina que está acá**.\n- Escribirle el martes al profe para ir el jueves a las 6pm.\n\n## Trabajo final\n\n- Si al final usamos regresión robusto como mejor modelo, \nentonces title debería ser sth like \"Regresión robusta aplicada a ...\".\n\n- No es necesario cubrir todos los aspectos del curso, \nsino lo requerido para el trabajo propuesto.\n\n- No necesario que sea un dataset popular, pero sí una real.\n\n- No se requiere que el mejor modelo sea vía robusta, \nsino justificar cuál resulta el mejor modelo, even si al final es OLS.\n\n\n::: {.callout-important}\n## Fijas\n\n- Cuando ajustamos OLS para un conjuntos de datos, y resulta que \nlos residuos **no tienen** una distribución como la supuesta (normalidad),\nentonces, **las conclusiones del modelo pueden estar equivocadas**.\n\n:::\n\n\n## Aplicación\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar librería necesaria\nlibrary(MASS)  # Contiene la función rlm()\n\n# Datos de ejemplo: relación entre peso y altura de un grupo de estudiantes\n# Incluimos un valor atípico para mostrar la robustez\naltura <- c(160, 165, 170, 175, 180, 185, 190, 200)\npeso <- c(55, 60, 65, 70, 75, 80, 85, 150)  # 150 es un outlier\n\n# Ajuste usando Mínimos Cuadrados Ordinarios (OLS)\nmodelo_ols <- lm(peso ~ altura)\nsummary(modelo_ols)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = peso ~ altura)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-18.333  -9.890  -1.447   6.996  27.017 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)   \n(Intercept) -270.0000    79.5804  -3.393  0.01463 * \naltura         1.9649     0.4457   4.409  0.00452 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 15.74 on 6 degrees of freedom\nMultiple R-squared:  0.7641,\tAdjusted R-squared:  0.7248 \nF-statistic: 19.44 on 1 and 6 DF,  p-value: 0.004525\n```\n\n\n:::\n\n```{.r .cell-code}\n# Ajuste usando Regresión Robusta (Huber M-estimator)\nmodelo_robusto <- rlm(peso ~ altura)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in rlm.default(x, y, weights, method = method, wt.method = wt.method, :\n'rlm' failed to converge in 20 steps\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(modelo_robusto)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall: rlm(formula = peso ~ altura)\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.041985 -0.022650 -0.003315  0.016021 54.935917 \n\nCoefficients:\n            Value     Std. Error t value  \n(Intercept) -105.3779    0.2167  -486.2069\naltura         1.0022    0.0012   825.6943\n\nResidual standard error: 0.04598 on 6 degrees of freedom\n```\n\n\n:::\n\n```{.r .cell-code}\n# Comparar coeficientes\ncoef(modelo_ols)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)      altura \n-270.000000    1.964912 \n```\n\n\n:::\n\n```{.r .cell-code}\ncoef(modelo_robusto)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)      altura \n -105.37787     1.00221 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Graficar resultados\nplot(altura, peso, pch = 19, col = \"black\", main = \"Comparación OLS vs Regresión Robusta\")\nabline(modelo_ols, col = \"red\", lwd = 2)     # Recta OLS\nabline(modelo_robusto, col = \"blue\", lwd = 2) # Recta Robusta\nlegend(\"topleft\", legend = c(\"OLS\", \"Robusta\"), col = c(\"red\", \"blue\"), lwd = 2)\n```\n\n::: {.cell-output-display}\n![](clase-13_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\n\n\n### Datos `stackloss`\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(stackloss)\n\n# Ver resumen\nhead(stackloss)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Air.Flow Water.Temp Acid.Conc. stack.loss\n1       80         27         89         42\n2       80         27         88         37\n3       75         25         90         37\n4       62         24         87         28\n5       62         22         87         18\n6       62         23         87         18\n```\n\n\n:::\n\n```{.r .cell-code}\n# Ajuste OLS\nols <- lm(stack.loss ~ ., data = stackloss)\n\n# Ajuste robusto Huber\nlibrary(MASS)\nrobust <- rlm(stack.loss ~ ., data = stackloss)\n\nsummary(ols)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = stack.loss ~ ., data = stackloss)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-7.2377 -1.7117 -0.4551  2.3614  5.6978 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -39.9197    11.8960  -3.356  0.00375 ** \nAir.Flow      0.7156     0.1349   5.307  5.8e-05 ***\nWater.Temp    1.2953     0.3680   3.520  0.00263 ** \nAcid.Conc.   -0.1521     0.1563  -0.973  0.34405    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.243 on 17 degrees of freedom\nMultiple R-squared:  0.9136,\tAdjusted R-squared:  0.8983 \nF-statistic:  59.9 on 3 and 17 DF,  p-value: 3.016e-09\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(robust)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall: rlm(formula = stack.loss ~ ., data = stackloss)\nResiduals:\n     Min       1Q   Median       3Q      Max \n-8.91753 -1.73127  0.06187  1.54306  6.50163 \n\nCoefficients:\n            Value    Std. Error t value \n(Intercept) -41.0265   9.8073    -4.1832\nAir.Flow      0.8294   0.1112     7.4597\nWater.Temp    0.9261   0.3034     3.0524\nAcid.Conc.   -0.1278   0.1289    -0.9922\n\nResidual standard error: 2.441 on 17 degrees of freedom\n```\n\n\n:::\n\n```{.r .cell-code}\n# Residuos OLS y robustos\nstackloss$res_ols <- residuals(ols)\nstackloss$res_robust <- residuals(robust)\n\n\n\n\n# 1) Gráfico de dispersión: stack.loss vs Air.Flow\nplot(stackloss$Air.Flow, stackloss$stack.loss,\n     pch = 19, col = \"black\",\n     main = \"Stack Loss vs Air Flow\",\n     xlab = \"Air Flow\",\n     ylab = \"Stack Loss\")\nabline(lm(stack.loss ~ Air.Flow, data = stackloss), col = \"red\", lwd = 2)\nabline(rlm(stack.loss ~ Air.Flow, data = stackloss), col = \"blue\", lwd = 2)\nlegend(\"topleft\",\n       legend = c(\"OLS\", \"Robusta\"),\n       col = c(\"red\", \"blue\"),\n       lwd = 2)\n```\n\n::: {.cell-output-display}\n![](clase-13_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 2) Gráfico de residuos OLS\nplot(ols$fitted.values, stackloss$res_ols,\n     main = \"Residuos OLS\",\n     xlab = \"Valores ajustados OLS\",\n     ylab = \"Residuos\",\n     pch = 19)\nabline(h = 0, col = \"red\")\n# Indicar observaciones con residuos grandes (e.g., > 2 std)\noutliers <- which(abs(stackloss$res_ols) > 2.5)\npoints(ols$fitted.values[outliers], stackloss$res_ols[outliers],\n       col = \"red\", pch = 19)\n```\n\n::: {.cell-output-display}\n![](clase-13_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# 3) Gráfico de residuos robustos\nplot(fitted(robust), stackloss$res_robust,\n     main = \"Residuos Regresión Robusta\",\n     xlab = \"Valores ajustados Robustos\",\n     ylab = \"Residuos\",\n     pch = 19)\nabline(h = 0, col = \"blue\")\n# Indicar observaciones con residuos grandes (e.g., > 2.5 std)\noutliers <- which(abs(stackloss$res_robust) > 2.5)\npoints(robust$fitted.values[outliers], stackloss$res_robust[outliers],\n       col = \"red\", pch = 19)\n```\n\n::: {.cell-output-display}\n![](clase-13_files/figure-html/unnamed-chunk-2-3.png){width=672}\n:::\n:::\n\n\n\n\n\n### Ejercicio pendiente\n\nReplicar este análisis, para el conjunto de datos `Prestige`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(carData)\ndata(Prestige)\n\nhead(Prestige)\n```\n:::\n\n\n\n\n\n\n## Aplicaciones de diseños experimentales\n\n### Objetivos\n\n- Metodizar la recolección, manipulación y análises de datos.\n- Controlar la variabilidad y optimiza la precisión de las estimaciones.\n\n### Elementos principales\n    \n- **Tratamientos, unidades y variables**: Factores a comparar, sujetos de estudio y características medidas.\n\n- **Aleatorización y replicación**: Asignación aleatoria y repetición para evitar sesgos y mejorar precisión.\n\n- **Control y modelo estadístico**: Estrategias para reducir variación no deseada y marco matemático para analizar los efectos.\n\n### Tipos de diseños experimentales\n\n- **Diseño completamente aleatorizado (DCA)**: Los tratamientos se asignan de forma totalmente aleatoria a las unidades experimentales. Es el diseño más sencillo\ny se usa cuando no se esperan fuentes de variación adicionales.\n\n- **Diseño en bloques completos al azar (DBCA)**: Las unidades se agrupan en bloques homogéneos para controlar una fuente conocida de variación, y dentro de\ncada bloque los tratamientos se asignan aleatoriamente.\n\n### DCA\n\n#### ANOVA para un DCA\n\n### Modelo para un DCA con covariable\n\n- **¿Por qué se centra la covariable?**: Centrar la covariable alrededor de su\nmedia mantiene µ como la media ajustada de la respuesta cuando la covariable\nestá en su valor promedio y reduce la correlación entre efectos de tratamiento y\ncovariable.\n\n- **Propósito del modelo**: Incluir una covariable ajusta la comparación de tratamientos al eliminar variabilidad atribuible a diferencias sistemáticas, aumentando así la precisión de los estimadores\n\n### Ejemplo de aplicación\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(InsectSprays)\nhead(InsectSprays)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  count spray\n1    10     A\n2     7     A\n3    20     A\n4    14     A\n5    14     A\n6    12     A\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(InsectSprays)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t72 obs. of  2 variables:\n $ count: num  10 7 20 14 14 12 10 23 17 20 ...\n $ spray: Factor w/ 6 levels \"A\",\"B\",\"C\",\"D\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```\n\n\n:::\n\n```{.r .cell-code}\ntable(InsectSprays$spray)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n A  B  C  D  E  F \n12 12 12 12 12 12 \n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(InsectSprays)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     count       spray \n Min.   : 0.00   A:12  \n 1st Qu.: 3.00   B:12  \n Median : 7.00   C:12  \n Mean   : 9.50   D:12  \n 3rd Qu.:14.25   E:12  \n Max.   :26.00   F:12  \n```\n\n\n:::\n\n```{.r .cell-code}\n# Media y desviación estándar por grupo\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:MASS':\n\n    select\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nInsectSprays %>%\n  group_by(spray) %>%\n  summarise(\n    n = n(),\n    media = mean(count),\n    sd = sd(count),\n    min = min(count),\n    max = max(count)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 6\n  spray     n media    sd   min   max\n  <fct> <int> <dbl> <dbl> <dbl> <dbl>\n1 A        12 14.5   4.72     7    23\n2 B        12 15.3   4.27     7    21\n3 C        12  2.08  1.98     0     7\n4 D        12  4.92  2.50     2    12\n5 E        12  3.5   1.73     1     6\n6 F        12 16.7   6.21     9    26\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(InsectSprays, aes(x = spray, y = count)) +\n  geom_boxplot() +\n  labs(title = \"Conteo de insectos por tipo de spray\",\n       x = \"Tipo de Spray\",\n       y = \"Número de insectos\") \n```\n\n::: {.cell-output-display}\n![](clase-13_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Ajustar modelo de ANOVA de un factor\n#############################\n# H0: no hay diferencia entre los tipos de spray\nmodelo <- aov(count ~ spray, data = InsectSprays)\nsummary(modelo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            Df Sum Sq Mean Sq F value Pr(>F)    \nspray        5   2669   533.8    34.7 <2e-16 ***\nResiduals   66   1015    15.4                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n\n\n\n**Notamos diferencias significativas entre al menos dos tipos de spray**.\n**Por lo menos existe una media diferente del resto.**\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Pruebas post hoc (Tukey)\n#############################\n# Prueba de comparaciones múltiples de Tukey\nTukeyHSD(modelo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = count ~ spray, data = InsectSprays)\n\n$spray\n           diff        lwr       upr     p adj\nB-A   0.8333333  -3.866075  5.532742 0.9951810\nC-A -12.4166667 -17.116075 -7.717258 0.0000000\nD-A  -9.5833333 -14.282742 -4.883925 0.0000014\nE-A -11.0000000 -15.699409 -6.300591 0.0000000\nF-A   2.1666667  -2.532742  6.866075 0.7542147\nC-B -13.2500000 -17.949409 -8.550591 0.0000000\nD-B -10.4166667 -15.116075 -5.717258 0.0000002\nE-B -11.8333333 -16.532742 -7.133925 0.0000000\nF-B   1.3333333  -3.366075  6.032742 0.9603075\nD-C   2.8333333  -1.866075  7.532742 0.4920707\nE-C   1.4166667  -3.282742  6.116075 0.9488669\nF-C  14.5833333   9.883925 19.282742 0.0000000\nE-D  -1.4166667  -6.116075  3.282742 0.9488669\nF-D  11.7500000   7.050591 16.449409 0.0000000\nF-E  13.1666667   8.467258 17.866075 0.0000000\n```\n\n\n:::\n:::\n\n\n\n\n\nEsto indica qué pares de sprays son significativamente diferentes.\nMenor `p ajustado`, implica más significativa, pero debe ser menor que\nel threshold que establezcamos.\n\nDentro de los estadísticamente diferentes, se compara en qué caso\nsucede la mayor diferencia (absoluta).\n\nAsí, la media de **F** es la más sigificativa.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Diagnóstico de supuestos del modelo\n#############################\n#Residuos vs valores ajustados)\nplot(modelo, which = 1)\n```\n\n::: {.cell-output-display}\n![](clase-13_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#Normalidad de residuos (Q-Q plot)\nplot(modelo, which = 2)\n```\n\n::: {.cell-output-display}\n![](clase-13_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prueba de normalidad de residuos\nshapiro.test(residuals(modelo))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tShapiro-Wilk normality test\n\ndata:  residuals(modelo)\nW = 0.96006, p-value = 0.02226\n```\n\n\n:::\n:::\n\n\n\n\n\nHay evidencia significativa para rechazar la hipótesis de normalidad de los residuos.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Homogeneidad de varianzas (prueba de Levene)\n# library(car)\n# leveneTest(count ~ spray, data = InsectSprays)\n\n\n#No Normalidad de residuos y Homogeneidad de varianzas\n#########################\n#1. ANOVA paramétrico (basado en F) puede producir resultados no confiables\n#2. Si n por grupo son similares y suficientemente grandes (n ≥ 30),\n# el ANOVA es robusto ante cierta desviación de normalidad (TLC).\n# Pero si las varianzas son muy heterogéneas y\n# los tamaños de muestra son muy desiguales, sí es grave.\n\n\nInsectSprays$log_count <- log(InsectSprays$count + 1) # +1 si hay ceros\nmodelo2 <- aov(log_count ~ spray, data = InsectSprays)\nsummary(modelo2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            Df Sum Sq Mean Sq F value Pr(>F)    \nspray        5  38.52   7.704   46.01 <2e-16 ***\nResiduals   66  11.05   0.167                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n\n\n\nHay evidencia significativa para rechazar la hipótesis de \nhomogeneidad de varianza.\n\n::: {.callout-important}\n### Posible solución\n\nComo fallaron ambos tests, ambas hipótesis,\nse recomienda **transformar** las covariables y/o variable respuesta,\nsea por medio de función de logaritmo, raiz cuadrada, etc.\n\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(modelo2, which = 1)\n```\n\n::: {.cell-output-display}\n![](clase-13_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(modelo2, which = 2)\n```\n\n::: {.cell-output-display}\n![](clase-13_files/figure-html/unnamed-chunk-9-2.png){width=672}\n:::\n\n```{.r .cell-code}\nshapiro.test(residuals(modelo2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tShapiro-Wilk normality test\n\ndata:  residuals(modelo2)\nW = 0.98475, p-value = 0.5348\n```\n\n\n:::\n\n```{.r .cell-code}\n#Homogeneidad de varianzas (prueba de Levene)\n# library(car)\n# leveneTest(log_count ~ spray, data = InsectSprays)\n```\n:::\n",
    "supporting": [
      "clase-13_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
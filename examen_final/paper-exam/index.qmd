# Lista de ejercicios {-}

## Exercise 2

```{r}
library(dplyr)
```

### Item a

```{r}
datos_str <- "
Trabajador,Semana,Turno,Indice
1,1,Día,51
1,2,Día,54
1,3,Día,59
1,4,Día,58
2,1,Día,52
2,2,Día,56
2,3,Día,57
2,4,Día,55
3,1,Noche,55
3,2,Noche,57
3,3,Noche,68
4,1,Noche,58
4,2,Noche,59
4,3,Noche,60
4,4,Noche,74
5,1,Día,52
5,2,Día,54
5,3,Día,57
5,4,Día,57
"

datos <- read.table(text = datos_str, header = TRUE, sep = ',') |>
  dplyr::mutate(Noche = Turno == 'Noche')

datos

modelo <- lm(Indice ~ Noche, data = datos)
lmtest::bptest(modelo)
```

### Item b

```{r}
lmtest::dwtest(modelo)
```

### Item c

```{r}
library(nlme)
```

```{r}
modelo_ols <- lm(Indice ~ Noche, data = datos)
summary(modelo_ols)
```

```{r}
modelo_wsl <- gls(
  Indice ~ Noche,
  data = datos,
  weights = varIdent(form = ~ 1 | Noche),
  method = "ML"
)
summary(modelo_wsl)
```

```{r}
modelo_ar1 <- gls(
  Indice ~ Noche,
  data = datos,
  correlation = corAR1(form = ~ 1),
  method = "ML"
)
summary(modelo_ar1)
```

### Item d

```{r}
AIC(modelo_ols, modelo_wsl, modelo_ar1)
```

Comparamos los modelos por medio de AIC.
Así, escogemos el modelo con menor AIC, ergo: **WSL**

### Item e


```{r}
resid(modelo_wsl, type = "pearson")

# Residuos estandarizados del modelo OLS
resid_ols_std <- rstandard(modelo_ols)

# Residuos estandarizados (tipo Pearson) del modelo ponderado
resid_wsl_std <- resid(modelo_wsl, type = "pearson")

# Plot base comparativo
plot(
  resid_ols_std, resid_wsl_std,
  col = "purple", pch = 16,
  xlab = "Residuos estandarizados (OLS)",
  ylab = "Residuos estandarizados (WSL)",
  main = "Comparación de residuos estandarizados: OLS vs. WSL",
)
abline(0, 1, col = "gray", lty = 2)
```

```{r}
# Residuos estandarizados
resid_ols_std <- rstandard(modelo_ols)
resid_wsl_std <- resid(modelo_wsl, type = "pearson")

# Coordenada x: 0 si Día, 1 si Noche
x_vals <- as.numeric(datos$Noche)

# Graficar los residuos OLS
plot(
  x_vals, resid_ols_std,
  col = rgb(1, 0, 0, 0.6), pch = 16,
  xlab = "Turno (0 = Día, 1 = Noche)",
  ylab = "Residuos estandarizados",
  main = "Residuos estandarizados: OLS (rojo) vs WSL (azul)",
  ylim = range(c(resid_ols_std, resid_wsl_std))
)

# Agregar residuos WSL en azul
points(
  x_vals, resid_wsl_std,
  col = rgb(0, 0, 1, 0.6), pch = 17
)

# Leyenda
legend(
  "topright",
  legend = c("OLS", "WSL"),
  col = c("red", "blue"),
  pch = c(16, 17),
  bty = "n"
)
```

Note la menor dispersion, por turno, de los residuos;
para el caso de wsl, pues está controlando la heterocedasticidad.

Asimismo, la varianza de los errores es más grande en el turno noche.